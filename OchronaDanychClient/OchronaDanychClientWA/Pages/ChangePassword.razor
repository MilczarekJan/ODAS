@page "/changePassword"
@using OchronaDanychShared.Models
@using Blazored.LocalStorage;
@using System.Security.Claims;
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IAuthService authService;
<h3>Change Password</h3>

<SfTextBox Placeholder='Old Password' Value="@oldPassword" @oninput="UpdateOldPassword"></SfTextBox>
<SfTextBox Placeholder='New Password' Value="@newPassword" @oninput="UpdateNewPassword"></SfTextBox>
<SfTextBox Placeholder='Confirm New Password' Value="@confirmedNewPassword" @oninput="UpdateConfirmedNewPassword"></SfTextBox>
<button class="btn btn-primary" @onclick="ChangePasswordFromApi">New Transfer</button>
<p>Password status: @transferNameToDisplay</p>

@code {
	private string transferNameToDisplay = "";
	public string oldPassword { get; set; } = "";
	public string newPassword { get; set; } = "";
	public string confirmedNewPassword { get; set; } = "";
	bool success;

	private void UpdateOldPassword(ChangeEventArgs args)
	{
		oldPassword = args.Value.ToString();
	}

	private void UpdateNewPassword(ChangeEventArgs args)
	{
		newPassword = args.Value.ToString();
	}

	private void UpdateConfirmedNewPassword(ChangeEventArgs args)
	{
		confirmedNewPassword = args.Value.ToString();
	}

	public async Task ChangePasswordFromApi()
	{
		var token = await LocalStorageService.GetItemAsStringAsync("authToken");
		token = token.Replace("\"", "");
		var auth = await authenticationStateProvider.GetAuthenticationStateAsync();
		var email = auth.User.Claims.Where(c => c.Type == ClaimTypes.Email).FirstOrDefault().Value;
		success = await authService.CheckPassword(token, email, confirmedNewPassword);
		success = await authService.ChangePassword(token, confirmedNewPassword);
		if (success)
		{
			transferNameToDisplay = "Success";
		}
		else transferNameToDisplay = "Wrong data";
	}
}
