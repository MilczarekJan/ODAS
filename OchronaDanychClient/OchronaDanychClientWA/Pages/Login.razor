@page "/"
@using OchronaDanychShared.Auth
@using OchronaDanychShared.Services;
@using Blazored.LocalStorage;
@using Microsoft.AspNetCore.Components.Authorization;
@inject IAuthService authService;
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <PageTitle>BankBankowski S.A</PageTitle>
            <h1>Logowanie</h1>

            <p>Email:</p>
            <InputText @bind-Value="mail" id="email"></InputText>
            <button class="btn btn-primary" @onclick="HandleEmail" disabled="@isButtonDisabled" style="background-color: @(isButtonDisabled ? "#cccccc" : "")">Log in</button>

            @if (isButtonClicked)
            {
                <p>Password letters @letters:</p>
                <div style="display: flex; gap: 5px;">
                    <InputText @bind-Value="char_0" type="password" id="password_1" maxlength="1" style="width: 25px; height: 25px;"></InputText>
                    <InputText @bind-Value="char_1" type="password" id="password_2" maxlength="1" style="width: 25px; height: 25px;"></InputText>
                    <InputText @bind-Value="char_2" type="password" id="password_3" maxlength="1" style="width: 25px; height: 25px;"></InputText>
                    <InputText @bind-Value="char_3" type="password" id="password_4" maxlength="1" style="width: 25px; height: 25px;"></InputText>
                    <InputText @bind-Value="char_4" type="password" id="password_5" maxlength="1" style="width: 25px; height: 25px;"></InputText>
                    <button class="btn btn-primary" @onclick="HandleLogin" disabled="@isButtonDisabled" style="background-color: @(isButtonDisabled ? "#cccccc" : "")">Verify password</button>
                </div>
            }

            <a> @message </a>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private string message = string.Empty;
    private string char_0 = "";
    private string char_1 = "";
    private string char_2 = "";
    private string char_3 = "";
    private string char_4 = "";
    private string mail = "";
    private string letters = "";
    private bool isButtonDisabled = false;
    private bool isButtonClicked = false;

    private async Task HandleEmail()
    {
        isButtonClicked = true;
        Thread.Sleep(3000);
        var userExists = await authService.CheckUser(mail);
        if (userExists == "No user")
        {
            message = "User does not exist";
            return;
        }
        else letters = userExists;
    }

    private async Task HandleLogin()
    {
        isButtonClicked = true;
        Thread.Sleep(3000);
        if (char_0 == null || char_1 == null || char_2 == null || char_3 == null || char_4 == null)
        {
            message = "Wrong password";
            return;
        }
        string password = char_0[0].ToString() + char_1[0].ToString()
        + char_2[0].ToString() + char_3[0].ToString() + char_4[0].ToString();
        UserLoginDTO userLoginDTO = new UserLoginDTO(password);
        userLoginDTO.Email = mail;
        var result = await authService.Login(userLoginDTO);

        if (result.Success)
        {
            await LocalStorageService.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("/");
        }
        else
        {
            message = result.Message;
            return;
        }
    }
}
